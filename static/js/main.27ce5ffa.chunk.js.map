{"version":3,"sources":["utils/callApi.js","apis.js","components/Loader.js","utils/index.js","utils/constants.js","components/CustomTooltip.js","components/LineChart.js","containers/ParentContainer.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["get","url","callApi","a","axios","then","response","res","data","catch","error","console","log","urls","getMeasurementsUrl","city","dateFrom","dateTo","useStyles","makeStyles","theme","progress","zIndex","position","top","left","transform","cont","width","Loader","props","loaderText","classes","className","Grid","container","direction","alignItems","justify","item","CircularProgress","size","Typography","variant","formatXAxis","tickItem","isDateOnXaxis","isTimeOnXaxis","format","Date","parseISO","isoDate","toISOString","substr","rechartColors","CustomTooltip","Paper","style","padding","label","payload","map","index","align","color","name","number","value","Number","Intl","NumberFormat","unit","LineChartMolecule","height","colors","ResponsiveContainer","LineChart","margin","right","bottom","XAxis","dataKey","tick","fill","stroke","strokeWidth","tickLine","axisLine","tickFormatter","YAxis","CartesianGrid","Tooltip","content","Legend","wrapperStyle","lines","line","Line","key","strokeDasharray","dashedLine","dot","React","memo","root","background","titleCont","marginBottom","selectCont","chartCont","display","placeItems","marginTop","centerDiv","fieldCont","submitButtonCont","ParentContainer","useState","loading","setLoading","setLoaderText","cities","setCities","graphData","setGraphData","useEffect","getCities","options","results","length","forEach","push","getGraphData","values","setSubmitting","date","addDays","chartData","groupedByDate","mapValues","groupBy","Object","keys","graphPointData","parameter","toUpperCase","reverse","initialValues","validate","errors","onSubmit","setTimeout","submitForm","isSubmitting","touched","utils","DateFnsUtils","component","Autocomplete","getOptionLabel","option","renderInput","params","TextField","helperText","DatePicker","autoOk","Button","disabled","onClick","createMuiTheme","palette","primary","main","light","dark","secondary","green","text","typography","fontFamily","join","button","textTransform","responsiveFontSizes","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27ce5ffa.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const get = async (url) => {\r\n  let res;\r\n  async function callApi() {\r\n    await axios\r\n      .get(url)\r\n      .then((response) => {\r\n        res = response.data;\r\n      })\r\n      .catch((error) => {\r\n        res = error?.response?.data;\r\n        console.log(error);\r\n      });\r\n  }\r\n  await callApi();\r\n  return res;\r\n};\r\n","export const urls = {\r\n  getCities: \"https://api.openaq.org/v1/cities?country=IN&limit=260\",\r\n};\r\n\r\nexport const getMeasurementsUrl = ({ city, dateFrom, dateTo }) => {\r\n  return `https://api.openaq.org/v1/measurements?country=IN&city=${city}&date_from=${dateFrom}&date_to=${dateTo}&limit=150`;\r\n};\r\n","import React from \"react\";\r\nimport { CircularProgress, Grid, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  progress: {\r\n    zIndex: 99,\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n  cont: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst Loader = (props) => {\r\n  const { loaderText } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.progress}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        className={classes.cont}\r\n      >\r\n        <Grid item>\r\n          <CircularProgress size={28} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"caption\">{loaderText}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import format from \"date-fns/format\";\r\nimport { parseISO } from \"date-fns\";\r\n\r\nexport const formatNumber = (number) => {\r\n  let locale = \"en-US\";\r\n  number = Number(number);\r\n  let formattedNumber = new Intl.NumberFormat(locale).format(number);\r\n  return formattedNumber;\r\n};\r\n\r\nexport const formatXAxis = (tickItem, isDateOnXaxis, isTimeOnXaxis) => {\r\n  if (tickItem) {\r\n    if (isDateOnXaxis) {\r\n      return format(new Date(parseISO(tickItem)), \"MM/dd/yyyy\");\r\n    } else if (isTimeOnXaxis) {\r\n      const date = new Date(tickItem);\r\n      const isoDate = date.toISOString();\r\n      return `${isoDate.substr(11, 8)}`;\r\n    }\r\n    return tickItem;\r\n  }\r\n  return \"\";\r\n};\r\n","export const rechartColors = [\r\n  \"#4285f4\",\r\n  \"#ea4335\",\r\n  \"#fbbc04\",\r\n  \"#34a853\",\r\n  \"#ff6d01\",\r\n  \"#46bdc6\",\r\n  \"#ff00ff\",\r\n  \"#7e40d3\",\r\n  \"#741b47\",\r\n  \"#cccccc\",\r\n  ];","import React from \"react\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n// import format from \"date-fns/format\";\r\n// import { parseISO } from \"date-fns\";\r\nimport { formatNumber, formatXAxis } from \"../utils\";\r\n\r\nconst CustomTooltip = (props) => {\r\n  const { isDateOnXaxis, isTimeOnXaxis } = props;\r\n\r\n  return (\r\n    <Paper style={{ padding: 10 }}>\r\n      <Typography variant=\"subtitle2\">\r\n        {formatXAxis(props.label, isDateOnXaxis, isTimeOnXaxis)}\r\n      </Typography>\r\n      {props.payload &&\r\n        props.payload.map((payload, index) => {\r\n          return (\r\n            <Typography\r\n              key={index}\r\n              variant=\"body2\"\r\n              align=\"left\"\r\n              style={{\r\n                color: payload.color,\r\n                padding: \"3px 0px\",\r\n              }}\r\n            >\r\n              {`${payload.name}: ${formatNumber(payload.value)}${payload.unit}`}\r\n            </Typography>\r\n          );\r\n        })}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CustomTooltip;\r\n","import React from \"react\";\r\nimport { LineChart, Line } from \"recharts\";\r\nimport { XAxis, YAxis, Tooltip } from \"recharts\";\r\nimport { Legend, ResponsiveContainer, CartesianGrid } from \"recharts\";\r\nimport { customTickFormatter, formatXAxis } from \"../utils\";\r\nimport { rechartColors } from \"../utils/constants\";\r\nimport CustomTooltip from \"./CustomTooltip\";\r\n\r\nconst LineChartMolecule = (props) => {\r\n  const { data, width, height, isDateOnXaxis, isTimeOnXaxis } = props;\r\n\r\n  let colors = rechartColors;\r\n\r\n  return (\r\n    data?.data && (\r\n      <ResponsiveContainer width={width} height={height}>\r\n        <LineChart\r\n          data={data.data}\r\n          margin={{ top: 5, right: 30, left: 5, bottom: 5 }}\r\n        >\r\n          <XAxis\r\n            dataKey=\"name\"\r\n            tick={{ fill: \"#949494\" }}\r\n            stroke=\"#5c5c5c\"\r\n            strokeWidth={0.5}\r\n            tickLine={false}\r\n            axisLine={true}\r\n            tickFormatter={(tickItem) =>\r\n              formatXAxis(tickItem, isDateOnXaxis, isTimeOnXaxis)\r\n            }\r\n            // interval=\"preserveStartEnd\"\r\n          />\r\n          <YAxis\r\n            tick={{ fill: \"#949494\" }}\r\n            stroke=\"#5c5c5c\"\r\n            strokeWidth={0.5}\r\n            tickLine={false}\r\n          />\r\n          <CartesianGrid strokeWidth={0.5} />\r\n          <Tooltip\r\n            content={\r\n              <CustomTooltip\r\n                isDateOnXaxis={isDateOnXaxis}\r\n                isTimeOnXaxis={isTimeOnXaxis}\r\n                {...props}\r\n              />\r\n            }\r\n          />\r\n          <Legend wrapperStyle={{ color: \"#c2c9d9\" }} />\r\n          {data.lines.map((line, index) => {\r\n            return (\r\n              <Line\r\n                key={index}\r\n                // type=\"monotone\"\r\n                name={line.name}\r\n                dataKey={line.key}\r\n                unit={line.unit}\r\n                stroke={colors[index]}\r\n                strokeDasharray={line.dashedLine ? \"5 5\" : null}\r\n                dot={{\r\n                  fill: colors[index],\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    )\r\n  );\r\n};\r\n\r\nexport default React.memo(LineChartMolecule);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\r\nimport { Typography, TextField } from \"@material-ui/core\";\r\nimport { get } from \"../utils/callApi\";\r\nimport { getMeasurementsUrl, urls } from \"../apis\";\r\nimport Loader from \"../components/Loader\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport \"date-fns\";\r\nimport LineChart from \"../components/LineChart\";\r\nimport { Autocomplete } from \"formik-material-ui-lab\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { DatePicker } from \"formik-material-ui-pickers\";\r\nimport format from \"date-fns/format\";\r\nimport addDays from \"date-fns/addDays\";\r\nimport mapValues from \"lodash/mapValues\";\r\nimport groupBy from \"lodash/groupBy\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    background: \"#f5f5f5\",\r\n    height: \"100vh\",\r\n  },\r\n  titleCont: {\r\n    marginBottom: \"1.5rem\",\r\n  },\r\n  selectCont: {\r\n    margin: \"1.5rem\",\r\n  },\r\n  chartCont: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    marginTop: \"2.5rem\",\r\n    width: \"100%\",\r\n    height: 500,\r\n  },\r\n  centerDiv: {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n  fieldCont: {\r\n    padding: \"0px 16px\",\r\n  },\r\n  submitButtonCont: {\r\n    padding: \"12px 16px 0px 16px\",\r\n  },\r\n}));\r\n\r\nconst ParentContainer = () => {\r\n  const classes = useStyles();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderText, setLoaderText] = useState(\"Loading Cities...\");\r\n  const [cities, setCities] = useState([]);\r\n  const [graphData, setGraphData] = useState({\r\n    data: [],\r\n    lines: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    getCities();\r\n  }, []);\r\n\r\n  const getCities = async () => {\r\n    let options = [];\r\n    setLoading(true);\r\n    let res = await get(urls.getCities);\r\n    if (res?.results?.length > 0) {\r\n      res.results.forEach((item) => {\r\n        options.push({ label: item.name, value: item.name });\r\n      });\r\n    }\r\n    setCities(options);\r\n    setLoading(false);\r\n  };\r\n\r\n  const getGraphData = async (values, setSubmitting) => {\r\n    let city = values.city.label;\r\n    let dateFrom = format(new Date(values.date), \"yyyy-MM-dd\");\r\n    let dateTo = format(addDays(new Date(values.date), 1), \"yyyy-MM-dd\");\r\n    setLoading(true);\r\n    setLoaderText(\"Loading pollution data...\");\r\n    let url = getMeasurementsUrl({\r\n      city: city,\r\n      dateFrom: dateFrom,\r\n      dateTo: dateTo,\r\n    });\r\n    let res = await get(url);\r\n    if (res?.results?.length > 0) {\r\n      let chartData = [];\r\n      let lines = [];\r\n      let groupedByDate = mapValues(groupBy(res.results, \"date.utc\"));\r\n      Object.keys(groupedByDate).forEach((key, index) => {\r\n        let graphPointData = {};\r\n        graphPointData.name = key;\r\n        groupedByDate[key].forEach((item) => {\r\n          graphPointData[item.parameter] = item.value;\r\n          if (index === 0) {\r\n            lines.push({\r\n              key: item.parameter,\r\n              name: item.parameter.toUpperCase(),\r\n              unit: item.unit,\r\n            });\r\n          }\r\n        });\r\n        chartData.push(graphPointData);\r\n      });\r\n      chartData.reverse();\r\n      setGraphData({ lines: lines, data: chartData });\r\n    }\r\n    setLoading(false);\r\n    setSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      className={classes.root}\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n    >\r\n      {loading && (\r\n        <div className={classes.centerDiv}>\r\n          <Loader loaderText={loaderText} />\r\n        </div>\r\n      )}\r\n      <Grid item className={classes.titleCont}>\r\n        <Typography variant=\"h5\" align=\"center\">\r\n          Pollution count by City\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item className={classes.selectCont}>\r\n        <Formik\r\n          initialValues={{\r\n            date: new Date(),\r\n            city: null,\r\n          }}\r\n          validate={(values) => {\r\n            const errors = {};\r\n            if (!values.city) {\r\n              errors.city = \"Required!\";\r\n            }\r\n            if (!values.date) {\r\n              errors.date = \"Required!\";\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            setTimeout(() => {\r\n              getGraphData(values, setSubmitting);\r\n            }, 500);\r\n          }}\r\n        >\r\n          {({ submitForm, isSubmitting, touched, errors }) => (\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <Form>\r\n                <Grid container alignItems=\"flex-start\">\r\n                  <Grid item className={classes.fieldCont}>\r\n                    <Field\r\n                      name=\"city\"\r\n                      component={Autocomplete}\r\n                      options={cities}\r\n                      getOptionLabel={(option) => option.label}\r\n                      style={{ width: 230 }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          margin=\"dense\"\r\n                          error={touched[\"city\"] && !!errors[\"city\"]}\r\n                          helperText={touched[\"city\"] && errors[\"city\"]}\r\n                          label=\"Select City\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item className={classes.fieldCont}>\r\n                    <Field\r\n                      component={DatePicker}\r\n                      autoOk\r\n                      format=\"dd/MM/yyyy\"\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      name=\"date\"\r\n                      label=\"Select Date\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item className={classes.submitButtonCont}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={isSubmitting}\r\n                      onClick={submitForm}\r\n                    >\r\n                      Search\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </MuiPickersUtilsProvider>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n      <Grid item className={classes.chartCont}>\r\n        {graphData.data.length > 0 && (\r\n          <LineChart\r\n            width={\"80%\"}\r\n            height={500}\r\n            data={graphData}\r\n            isTimeOnXaxis={true}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ParentContainer;\r\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#2574fb\",\r\n      light: \"#d0e1ff\",\r\n      dark: \"#303f9f\",\r\n    },\r\n    secondary: {\r\n      main: \"#6e19ce\",\r\n    },\r\n    green: {\r\n      main: \"#26c738\",\r\n      dark: \"#079417\",\r\n    },\r\n    text: {\r\n      secondary: \"#898b8f\",\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: [\"Comfortaa\"].join(\",\"),\r\n    button: {\r\n      textTransform: \"none\",\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n\r\nexport default theme;\r\n","import ParentContainer from \"./containers/ParentContainer\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport theme from \"./theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline /> <ParentContainer />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}